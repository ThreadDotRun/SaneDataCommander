# Service Abstractor

The **Service Abstractor** is a system service agnostic interface designed to unify and simplify interactions with various system-level services, such as databases, network communications, and more. Think of it as a virtual machine for services, abstracting the complexities of traditional configurations and providing a consistent API for diverse operations.

## Features
- **Unified Database Connectivity**: Connect to multiple database types (e.g., MySQL, PostgreSQL, SQLite) through a single interface using the `UniversalDatabaseConnector`.
- **Configuration Management**: Store and retrieve service configurations from CSV files and SQLite databases with the `Distributor`.
- **Database Exploration**: View database structures and data with the `DatabaseViewer`.
- **API Summarization**: Generate project overviews and file summaries with the `APISummarizer` for easy documentation.
- **Extensible Design**: Built to support additional services, such as network communication (planned), to handle tasks like HTTP, FTP, or SMTP.

## Project Structure
```
SaneDataCommander/
├── APISummarizer.py        # Summarizes project files for documentation
├── Distributor.py          # Manages service configurations
├── UniversalDatabaseConnector.py  # Handles database connections
├── DatabaseViewer.py       # Displays database structures and data
├── Test_UDC.py             # Unit tests for core components
├── Testing/                # Directory for test-related files
└── __pycache__/            # Python cache directory
```

## Getting Started

### Prerequisites
- Python 3.8+
- Required Python packages:
  - `pandas` (for CSV handling)
  - `sqlite3` (for configuration storage)
  - Database-specific drivers (e.g., `psycopg2` for PostgreSQL, `mysql-connector` for MySQL)

Install dependencies:
```bash
pip install pandas psycopg2 mysql-connector-python
```

### Installation
1. Clone the repository:
   ```bash
   git clone https://github.com/your-username/SaneDataCommander.git
   cd SaneDataCommander
   ```

2. Set up your configuration CSV file (e.g., `configs.csv`):
   ```csv
   service,name,version,host,port,db_name
   sql,postgres,1.0,localhost,5432,mydb
   sql,mysql,1.0,localhost,3306,mydb
   ```

### Usage
1. **Connect to a Database**:
   ```python
   from UniversalDatabaseConnector import UniversalDatabaseConnector

   # Initialize the connector
   connector = UniversalDatabaseConnector(db_path="configs.db")

   # Load configurations
   connector.load_configs("configs.csv")

   # Connect to a service
   connection = connector.connect(service_name="postgres", version="1.0")

   # Execute a query
   result = connector.execute_query("SELECT * FROM users")
   print(result)

   # Close the connection
   connector.close()
   ```

2. **View Database Structure**:
   ```python
   from DatabaseViewer import DatabaseViewer

   viewer = DatabaseViewer(db_path="configs.db")
   viewer.connect()
   viewer.show_db_and_tables()
   viewer.close()
   ```

3. **Run Tests**:
   ```bash
   python -m unittest Test_UDC.py
   ```

## Planned Features
- **Network Communication Service**: A unified API for sending/receiving data over protocols like HTTP, FTP, or SMTP, extending the framework’s system service abstraction.
- **Query Builder**: A database-agnostic query construction tool to simplify SQL generation across different database types.

## Contributing
Contributions are welcome! To contribute:
1. Fork the repository.
2. Create a feature branch (`git checkout -b feature/your-feature`).
3. Commit your changes (`git commit -m "Add your feature"`).
4. Push to the branch (`git push origin feature/your-feature`).
5. Open a pull request.

## License
This projectGAR MIT License. See [LICENSE](LICENSE) for details.

## Contact
For questions or suggestions, please open an issue on GitHub or contact [your-email@example.com](mailto:your-email@example.com).

---
*Service Abstractor: Unifying system services for a seamless future.*